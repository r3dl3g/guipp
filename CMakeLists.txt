cmake_minimum_required(VERSION 3.1 FATAL_ERROR)

project("gui-lib" CXX)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

function(print_var VAR)
    message(STATUS "${VAR}: '" ${${VAR}} "'")
endfunction(print_var)

if(CMAKE_CXX_COMPILER MATCHES "/em\\+\\+(-[a-zA-Z0-9.])?$")
  set(EMSCRIPTEN 1)
endif()

print_var(CMAKE_CXX_PLATFORM_ID)
print_var(CMAKE_CXX_COMPILER_ID)
print_var(CMAKE_SYSTEM_PROCESSOR)
print_var(CMAKE_HOST_SYSTEM_PROCESSOR)
print_var(CMAKE_LIBRARY_ARCHITECTURE)

set (CMAKE_USE_RELATIVE_PATHS FALSE)

if (NOT DEFINED GUIPP_BUILD_FOR_MOBILE)
  if (CMAKE_LIBRARY_ARCHITECTURE STREQUAL 'arm-linux-gnueabihf')
    set(GUIPP_BUILD_FOR_MOBILE On)
  endif ()
endif ()

if (CMAKE_CXX_PLATFORM_ID STREQUAL "Windows" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    message(STATUS "Building with Clang!")
    set(CMAKE_CXX_FLAGS "${_PLATFORM_DEFINES}${_PLATFORM_DEFINES_CXX} -fms-extensions -fms-compatibility -Wno-ignored-qualifiers -Fp -EHsc -D_WINDOWS")
    set(CMAKE_CXX_FLAGS_DEBUG  "/MDd -O0 -Zi")
    set(CMAKE_CXX_FLAGS_RELEASE  "/MD -O2 -DNDEBUG")
    set(INSTALL_BASE_DIR "C:\\Programm Files\\guipp")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL MSVC)
    add_compile_options(/Y-)
    set(INSTALL_BASE_DIR "C:\\Programm Files\\guipp")
elseif (CMAKE_CXX_PLATFORM_ID  STREQUAL "FreeBSD")
    set(CMAKE_CXX_FLAGS "-I/usr/local/include -I/usr/local/include/freetype2")
    link_directories(/usr/local/lib /usr/local/lib/gcc9)
    add_definitions(-DBSD)
    set(INSTALL_BASE_DIR "/usr/local")
elseif (ANDROID)
    include(qt-android-cmake/AddQtAndroidApk.cmake)
    add_definitions(-DANDROID)
elseif (EMSCRIPTEN)
    message(STATUS "GUIPP: build with emscripten!")
    add_definitions(-DUSE_FILE_TIME_POINT -DUSE_EMSCRIPT)
#    set(CMAKE_AR "emcc")
#    set(CMAKE_STATIC_LIBRARY_SUFFIX ".bc")
#    set(CMAKE_C_CREATE_STATIC_LIBRARY "<CMAKE_AR> -o <TARGET> <LINK_FLAGS> <OBJECTS>")
#    set(CMAKE_CXX_CREATE_STATIC_LIBRARY "<CMAKE_AR> -o <TARGET> <LINK_FLAGS> <OBJECTS>")
else()
    set(INSTALL_BASE_DIR "/usr/local")
endif ()

if (GUIPP_USE_QT6)
    message(STATUS "GUIPP: build with Qt6!")
    find_package(Qt6Core)
    find_package(Qt6Gui)
elseif (GUIPP_USE_QT5)
    message(STATUS "GUIPP: build with Qt5!")
    find_package(Qt5Gui REQUIRED)
endif ()

set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/obj)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if (NOT ANDROID AND NOT CMAKE_DEBUG_POSTFIX)
    set(CMAKE_DEBUG_POSTFIX d)
endif ()

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_definitions(-Wall -Wno-switch -Wno-unused-command-line-argument -Wno-sign-compare  -Wno-unused-local-typedef)
    if (NOT CMAKE_CXX_PLATFORM_ID STREQUAL "Windows")
        add_definitions(-fexceptions)
    endif ()
endif ()

get_directory_property(HAS_PARENT PARENT_DIRECTORY)
if (NOT HAS_PARENT)
  set (GUIPP_STANDALONE_BUILD ON)
endif ()

add_subdirectory(gui)

if (GUIPP_STANDALONE_BUILD)
  if (NOT ANDROID AND NOT EMSCRIPTEN)
    add_subdirectory(tests)
    add_subdirectory(tools)
  endif ()
  add_subdirectory(samples)
endif ()

if(HAS_PARENT)
  set (GUIPP_CXX_FLAGS ${GUIPP_CXX_FLAGS} PARENT_SCOPE)
  set (GUIPP_CXX_STANDARD ${GUIPP_CXX_STANDARD} PARENT_SCOPE)
  set (GUIPP_INCLUDE_DIRS ${GUIPP_INCLUDE_DIRS} PARENT_SCOPE)
  set (GUIPP_LIBRARIES ${GUIPP_LIBRARIES} PARENT_SCOPE)
  set (GUIPP_APP_LIBRARIES ${GUIPP_APP_LIBRARIES} PARENT_SCOPE)
  set (GUIPP_SYS_LIBRARIES ${GUIPP_SYS_LIBRARIES} PARENT_SCOPE)
  set (GUIPP_EXE_LINKER_FLAGS ${GUIPP_EXE_LINKER_FLAGS} PARENT_SCOPE)
endif()
